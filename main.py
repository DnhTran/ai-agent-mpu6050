import time
from datetime import datetime
from agent_core.real_time_predictor import RealTimePredictor
from agent_core.explainer import explain_state
from agent_core.logger import log_state
from agent_core.notifier import send_alert
from tflite_runtime.interpreter import load_delegate
from web_api import app, update_status

import os

print("EMAIL_SENDER:", os.getenv("EMAIL_SENDER"))
print("EMAIL_RECEIVER:", os.getenv("EMAIL_RECEIVER"))
print("EMAIL_PASSWORD:", os.getenv("EMAIL_PASSWORD"))

MODEL_PATH = '/home/NOISE/ai_agent_mpu6050/models/lstm_model.tflite'
ALERT_THRESHOLD = 5

def main():
    # Th·ª≠ t·∫£i flex delegate (n·∫øu model d√πng ops ƒë·∫∑c bi·ªát)
    try:
        flex_delegate = load_delegate('libtensorflowlite_flex.so')
        print("‚úÖ Flex delegate loaded.")
    except OSError:
        print("‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c Flex delegate, s·ª≠ d·ª•ng interpreter m·∫∑c ƒë·ªãnh.")
        flex_delegate = None

    # Kh·ªüi t·∫°o RealTimePredictor v·ªõi delegate (n·∫øu c√≥)
    predictor = RealTimePredictor(model_path=MODEL_PATH, delegate=flex_delegate)

    error_count = 0

    try:
        print("üöÄ AI Agent b·∫Øt ƒë·∫ßu ch·∫°y...")

        while True:
            state, confidence = predictor.predict()
            print(f"DEBUG: state={state}, confidence={confidence}, error_count={error_count}")

            if state is None:
                time.sleep(0.05)
                continue

            message = explain_state(state)
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            log_state(timestamp, state, confidence, message)

            print(f"[{timestamp}] Tr·∫°ng th√°i: {state} - ƒê·ªô tin c·∫≠y: {confidence:.2f} - {message}")

            if state in ['DANGEROUS TIPPING', 'STRONG VIBRATION']:
                error_count += 1
                if error_count >= ALERT_THRESHOLD:
                    alert_msg = (
                        f"C·∫£nh b√°o: Tr·∫°ng th√°i '{state}' xu·∫•t hi·ªán li√™n ti·∫øp {error_count} l·∫ßn.\n"
                        f"Chi ti·∫øt: {message}"
                    )
                    print("‚ö†Ô∏è ƒê√£ ƒë·∫°t ng∆∞·ª°ng c·∫£nh b√°o! Chu·∫©n b·ªã g·ª≠i email...")
                    send_alert(alert_msg)
                    print("üìß ƒê√£ g·ª≠i email c·∫£nh b√°o.")
                    error_count = 0
            else:
                error_count = 0

            time.sleep(0.05)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è AI Agent d·ª´ng l·∫°i.")
    finally:
        predictor.close()

if __name__ == '__main__':
    main()
